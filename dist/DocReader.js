/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define(["lodash"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("lodash")) : factory(root["_"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_lodash__) {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/DefaultParsers.js":
/*!*******************************!*\
  !*** ./lib/DefaultParsers.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  // Parse an author line (e.g. '@author Matt Carter <m@ttcarter.com>`) as {name: String, email: String}\n  author(line) {\n    var match;\n\n    if (match = /^(?<name>.+) <(?<email>)>/.exec(line)?.groups) {\n      // Name + Email\n      return match.groups;\n    } else {\n      // Assume just name\n      return line;\n    }\n  },\n\n  // Factory param handler to only accept values of an enum\n  enum(...values) {\n    return function (line) {\n      if (!values.contains(line)) throw new Error(`Invalid enum value \"${line}\" can only accept ${values.join('|')}`);\n      return line;\n    };\n  },\n\n  // Return a simple `true` boolean (e.g. '@function', '@global'\n  flag(line) {\n    return true;\n  },\n\n  // Parse `description` lines as {description: String}\n  description(line) {\n    return {\n      description: line\n    };\n  },\n\n  // Parse `name` lines as {name: String}\n  name(line) {\n    return {\n      name: line\n    };\n  },\n\n  // Parse pointers to functions (@event, @fires) as {class?: String, event: String, eventName?:String}\n  pointer(line) {\n    var parsed = /((?<class>.+?)#)?(?<event>.+)(:(?<eventname>.+?))?$/.exec(line)?.groups;\n    if (!parsed) throw new Error(`Failed to parse \"${line}\" as pointer`);\n    return parsed;\n  },\n\n  // Parse `{type}` as {type: String}\n  type(line) {\n    return {\n      type: line\n    };\n  },\n\n  // Parse `{type} description` as {type: String, description: String}\n  typeDescription(line) {\n    var parsed = /(\\{(?<type>.+?)\\})?\\s*(?<description>.*)$/.exec(line)?.groups;\n    if (!parsed) throw new Error(`Failed to parse \"${line}\" as type?+description`);\n    return parsed;\n  },\n\n  // Parse `{type} name` as {type: String, name: String}\n  typeName(line) {\n    var parsed = /(\\{(?<type>.+?)\\})?\\s*(?<name>.*)$/.exec(line)?.groups;\n    if (!parsed) throw new Error(`Failed to parse \"${line}\" as type?+name`);\n    return parsed;\n  },\n\n  // Parse @param style `{type} [name] description` as {type: String, name: String, description: String}\n  typeNameDescription(line) {\n    var parsed = /(\\{(?<type>.+?)\\})?\\s*(?<name>.+?)\\s+(?<description>.*)$/.exec(line)?.groups;\n    if (!parsed) throw new Error(`Failed to parse \"${line}\" as type+name?+description`);\n    parsed.isRequired = !/^\\[.+\\]$/.test(parsed.name); // Optional type (e.g. `[req.query.q]`)\n\n    parsed.name = lodash__WEBPACK_IMPORTED_MODULE_0___default().trim(parsed.name, '[]'); // Strip enclosing braces\n\n    return parsed;\n  },\n\n  // Parse @route style `GET /api/widgets` as {method: String, path: String}\n  rest(line) {\n    var parsed = /^(?<method>[A-Z]+)?\\s*(?<path>.+)$/.exec(line)?.groups;\n    if (!parsed) throw new Error(`Failed to parse \"${line}\" as ReST URL`);\n    parsed.method = parsed.method ? parsed.method.toLowerCase() : 'get';\n    return parsed;\n  },\n\n  // Factory function which simply assigns values into named paramers\n  split(...fields) {\n    return function (line) {\n      return lodash__WEBPACK_IMPORTED_MODULE_0___default().chain(line).split(/\\s+/).mapKeys((v, i) => fields[i]).mapValues().value();\n    };\n  },\n\n  // Parse `{value}` as {value: String}\n  value(line) {\n    return {\n      value: line\n    };\n  }\n\n});\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./lib/DefaultParsers.js?");

/***/ }),

/***/ "./lib/DocReader.js":
/*!**************************!*\
  !*** ./lib/DocReader.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DocReader)\n/* harmony export */ });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DefaultParsers.js */ \"./lib/DefaultParsers.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! debug */ \"./node_modules/debug/src/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_3__);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n //import DocResponse from '@momsfriendlydevco/docgen';\n//import {DefaultParsers as parsers} from '@momsfriendlydevco/docgen';\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_3__('docgen:DocReader');\nclass DocReader {\n  /**\n  * Various JSDoc parameters per line\n  * Each key is the JSDOc param e.g. 'param', if no match is found the meta '@DEFAULT' is used instead\n  *\n  * @type {Object}\n  * @property {string} [as] Optional override to how the ID of the block should be referred to\n  * @property {boolean} [enabled=true] Whether to accept this parameters input and add it to the current JSDOC block\n  * @property {function} [handler] Optional function called as (operand) which returns the line payload, otherwise entire line is used\n  * @property {boolean|string} [multiline=false] Whether the parameter can accept multiple line input until the next block (e.g. `@example`), if a string this specifies what property the multiline text should be appended to\n  * @property {boolean} [isUnique=false] Only allow one of these items per block, if false all elements are appended as array items\n  * @property {boolean} [endpoint='jsdoc'] How to handle the block once its extracted, sets the overall block.endpoint type so downstream can redirect it to the right endpoint\n  */\n  constructor() {\n    _defineProperty(this, \"params\", {\n      DEFAULT: {\n        enabled: false\n      },\n      abstract: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag,\n        alias: 'virtual'\n      },\n      access: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.enum('package', 'private', 'protected', 'public')\n      },\n      alias: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      async: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      augments: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description,\n        alias: 'extends'\n      },\n      author: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.author\n      },\n      borrows: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      callback: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      classdesc: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      class: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.split('type', 'name'),\n        alias: 'constructor'\n      },\n      constant: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.split('type', 'name'),\n        alias: 'const'\n      },\n      constucts: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      copyright: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      default: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.value,\n        alias: 'defaultvalue'\n      },\n      depreciated: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      description: {\n        multiline: 'description',\n        alias: 'desc'\n      },\n      enum: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.type\n      },\n      event: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.pointer\n      },\n      example: {\n        multiline: 'content',\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      exports: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      external: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name,\n        alias: 'host'\n      },\n      file: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description,\n        alias: ['fileoverview', 'overview']\n      },\n      fires: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.pointer,\n        alias: 'emits'\n      },\n      function: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      generator: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      global: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      hideconstructor: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      ignore: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      implements: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      inheritdoc: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      inner: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      instance: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      interface: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      kind: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      lends: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      license: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      listens: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      member: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.typeName\n      },\n      memberof: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      mixes: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      mixin: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      module: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.typeName\n      },\n      name: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      namespace: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      override: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      package: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      param: {\n        as: 'params',\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.typeNameDescription,\n        alias: ['arg', 'argument']\n      },\n      private: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      property: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag,\n        alias: 'prop'\n      },\n      protected: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      public: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      readonly: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      requires: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      returns: {\n        isUnique: true,\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.typeDescription,\n        alias: 'return'\n      },\n      route: {\n        endpoint: 'oapi',\n        isUnique: true,\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.rest\n      },\n      see: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      since: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      static: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.flag\n      },\n      summary: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      this: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      throws: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      todo: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      tutorial: {\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      typedef: {\n        isUnique: true,\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.typeName\n      },\n      type: {\n        isUnique: true,\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.description\n      },\n      variation: {\n        isUnique: true,\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      version: {\n        isUnique: true,\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.name\n      },\n      yields: {\n        isUnique: true,\n        handler: _DefaultParsers_js__WEBPACK_IMPORTED_MODULE_2__.default.typeDescription\n      }\n    });\n\n    // Expand this.params to include pointers for all aliases\n    Object.values(this.params).filter(param => param.alias).forEach(param => lodash__WEBPACK_IMPORTED_MODULE_0___default().castArray(param.alias).forEach(alias => this.params[alias] = param));\n  }\n\n  /**\n  * Parse file paths extracting all JSDoc + OAPI specs\n  *\n  * @param {string|array<string>} paths Path(s) to process\n  * @param {object} [options] Additional options to use when parsing\n  * @see parseJSDoc() For futher option parsing\n  * @returns {Promise<object>} A promise which will resolve with the eventual response object\n  */\n  parseFiles(paths, options) {\n    return Promise.all(lodash__WEBPACK_IMPORTED_MODULE_0___default().castArray(paths).map(path => fs__WEBPACK_IMPORTED_MODULE_1___default().promises.readFile(path, 'utf-8').then(contents => {\n      debug('Processing: ', path);\n      return this.parseString(contents, options);\n    }))).then(contents => contents.reduce((acc, cur) => lodash__WEBPACK_IMPORTED_MODULE_0___default().merge(acc, cur), {}));\n  }\n\n  /**\n  * Attempt to parse an input string returning all extracted JSDoc + OAPI translactions\n  *\n  * @param {string} input Input string to parse\n  * @param {object} [options] Additional options to use when parsing\n  * @returns {JSDOCAPIResponse} Response object\n  * @see parseJSDoc() For futher option parsing\n  */\n  parseString(input, options) {\n    var blocks = this.parseJSDoc(input, options);\n    return {\n      jsdoc: blocks.filter(b => b.function || !b.route),\n      oapi: {\n        paths: lodash__WEBPACK_IMPORTED_MODULE_0___default()(blocks).filter(b => !b.function && b.route).mapKeys(b => b.route.path).mapValues(b => {\n          //debug('block', b);\n          let match;\n          match = /^\\/(?<type>[\\w\\.]+)\\/(?<controller>[\\w\\.]+)\\/?(?<params>.*)/.exec(b.route.path);\n\n          const controllerName = lodash__WEBPACK_IMPORTED_MODULE_0___default().startCase(match.groups?.controller);\n\n          debug('match', match.groups);\n          let operationId;\n\n          if (match.groups?.type === 'api') {\n            switch (b.route.method) {\n              case 'delete':\n                // TODO: Depluralise\n                operationId = `Delete ${controllerName}`;\n                break;\n\n              case 'get':\n                switch (match.groups?.params) {\n                  case '':\n                    operationId = `List ${controllerName}`;\n                    break;\n\n                  case ':id':\n                    // TODO: Depluralise\n                    operationId = `Get ${controllerName}`;\n                    break;\n                }\n\n                break;\n\n              case 'post':\n                switch (match.groups?.params) {\n                  case '':\n                    // TODO: Depluralise\n                    operationId = `Create ${controllerName}`;\n                    break;\n\n                  case ':id':\n                    // TODO: Depluralise\n                    operationId = `Update ${controllerName}`;\n                    break;\n                }\n\n                break;\n            }\n          }\n\n          let customisation = {\n            tags: [controllerName]\n          };\n          if (operationId) customisation.operationId = operationId;\n          return {\n            [b.route.method]: { ...customisation,\n              ...(b.description ? {\n                description: b.description\n              } : {}),\n              ...(b.summary ? {\n                summary: b.summary\n              } : {}),\n              ...(b.params ? {\n                parameters: b.params.filter(param => lodash__WEBPACK_IMPORTED_MODULE_0___default().isPlainObject(param) && Object.prototype.hasOwnProperty.call(param, 'name') && (param.name.startsWith('req.params.') || param.name.startsWith('req.query.') || param.name.startsWith('req.headers.'))).map(param => {\n                  // Accept node spec and return OAPI schema\n                  // e.g. '*', 'string', 'array<number>', 'array<object>', 'string|number'\n                  var schemaRender = node => {\n                    if (/\\|/.test(node.type)) {\n                      return {\n                        oneOf: // Multiple types\n                        param.type.split(/\\s*\\|\\s*/).map(schemaRender)\n                      }; // FIXME: match not utilised\n                    } else if (match = /^(<(?<wrapper>)>)(?<childType>.+)$/.exec(node)?.groups) {\n                      // e.g. `array<string>`\n                      throw new Error(`Only direct syntax types are supported now. Dont use \"array<number>\" style inputs for @route. Detected at \"${node}`);\n                    } else if (node.type) {\n                      return {\n                        type: node.type\n                      };\n                    } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default().isString(node)) {\n                      return {\n                        type: node\n                      };\n                    } else {\n                      throw new Error(`Unable to parse schema for \"${node}\"`);\n                    }\n                  };\n\n                  var schema = param.type == '*' ? {} // Accept everything anyway\n                  : /\\|/.test(param.type) ? {\n                    schema: {\n                      oneOf: // Multiple types\n                      param.type.split(/\\s*\\|\\s*/).map(schemaRender)\n                    }\n                  } : {\n                    schema: schemaRender(param.type)\n                  }; // Single type\n                  // Extracting default from key=\"value\" style names\n\n                  if (match = /^(?<key>[\\w\\.]+)=(?<val>[^\\s]+)$$/.exec(param.name)) {\n                    param.name = match.groups.key;\n                    schema.schema.default = /^\\\".*\\\"$/.exec(match.groups.val) ? match.groups.val : new Number(match.groups.val); // Include default in description to work-around widdershins user_templates failure\n\n                    param.description += ` (default: ${schema.schema.default})`;\n                  }\n\n                  if (param.name.startsWith('req.params.')) {\n                    return {\n                      name: param.name.replace(/^req\\.params\\./, ''),\n                      in: 'path',\n                      description: param.description,\n                      required: param.isRequired,\n                      ...schema\n                    };\n                  } else if (param.name.startsWith('req.query.')) {\n                    return {\n                      name: param.name.replace(/^req\\.query\\./, ''),\n                      in: 'query',\n                      description: param.description,\n                      required: param.isRequired,\n                      ...schema\n                    };\n                  } else if (param.name.startsWith('req.headers.')) {\n                    return {\n                      name: param.name.replace(/^req\\.headers\\./, ''),\n                      in: 'header',\n                      description: param.description,\n                      required: param.isRequired,\n                      ...schema\n                    };\n                  } else {\n                    console.log('[WARN]', 'Unrecognised param', param.name);\n                    return null;\n                  }\n                })\n              } : {})\n            }\n          };\n        }).value()\n      }\n    };\n  }\n\n  /**\n  * Attempt to parse an input string returning all extracted JSDoc blocks\n  *\n  * @param {string} input Input string to parse\n  * @param {object} [options] Additional options to use when parsing\n  * @param {string} [options.initialBlock='description'] Start parsing within this block (must a multiline param)\n  * @param {number} [options.lineOffset=1] Initial line offset (must be at least 1 to counnter zero based line numbering)\n  * @returns {array<Object>} Collection of all extracted JSDoc blocks\n  */\n  parseJSDoc(input, options) {\n    var settings = {\n      initialBlock: 'description',\n      lineOffset: 1,\n      context: (block, lines) => {\n        // Determine context from next code lines - return truthy when found or false if nothing\n        return lines.find(line => {\n          var match;\n          line = lodash__WEBPACK_IMPORTED_MODULE_0___default().trimStart(line);\n          if (!line || /\\s*\\/\\//.test(line)) return false; // if blank || comment skip\n\n          if (match = /^app\\.(?<method>delete|get|head|options|patch|post|put|trace)\\((?<speachmark>['\"`])(?<path>.+?)\\k<speachmark>\\s*,/.exec(line)?.groups) {\n            // Looks like a doop endpoint (e.g. `app.get('/api', (req, res) => ...)`)\n            if (!block.route) block.route = {}; // No route manually set - assign stub\n\n            block.route.method = match.method;\n            block.route.path = match.path;\n            return true;\n          } else if (match = /^(?<function>app\\..+?)\\s*=/.exec(line)?.groups) {\n            // Global Doop app.FUNC\n            block.name = match.function;\n            block.function = true;\n            block.global = true;\n            return true;\n          } else if (match = /^(?<function>.+?)\\s*=/.exec(line)?.groups) {\n            block.name = match.function;\n            block.function = true;\n            return true;\n          }\n        });\n      },\n      contextLimit: 3,\n      // Max number of lines to look ahead to auto-determine context before erroring out\n      postProcess: block => {\n        // Clean up descriptions\n        block.description = lodash__WEBPACK_IMPORTED_MODULE_0___default().trim(block.description); // Extract missing req.params if they are omitted\n\n        if (settings.warnRouteMissingArgs && block.route) {\n          var definedParams = new Set((block.params ?? []).map(p => p.name));\n          [...block.route.path.matchAll(/(?::(?<param>\\w+))/g)].map(m => `req.params.${m.groups.param}`).filter(param => !definedParams.has(param)).forEach(param => settings.warn('warnRouteMissingArgs', `Param \"${param}\" missing from definition of route '${block.route.method} ${block.route.path}'`));\n        }\n      },\n      warn: (type, ...msg) => {\n        console.log('[WARN]', ...msg);\n      },\n      warnNoAutoContext: false,\n      // Warn when the context of a function cannot be determined\n      warnRouteMissingArgs: true,\n      // Warn when a route has missing req.params (extacted from urls like `/api/widgets/:id`\n      ...options\n    };\n    var out = [];\n    var inBlock = false;\n    var inMultiline = false; // or the string pointer to the parameter in block to append to\n\n    var block; // {desc, ...jsdocHeaders}\n\n    input.split(/\\s*\\n\\s*/).forEach((line, lineOffset, lines) => {\n      if (/^\\s*\\/\\*\\*/.test(line)) {\n        // Start of block\n        if (inBlock) {\n          debug('Opening line: ', lineOffset + settings.lineOffset);\n          settings.warn(`warnStartWithinStart`, `Start of block when already in block at line ${lineOffset + settings.lineOffset}`);\n          return;\n        }\n\n        block = {};\n        if (settings.initialBlock && this.params[settings.initialBlock]?.isMultiline) throw new Error('parseJSDoc({initialBlock}) must be a multiline param');\n        if (settings.initialBlock) inMultiline = settings.initialBlock;\n        inBlock = true;\n      } else if (/^\\s*\\*\\//.test(line)) {\n        // End of comment block area\n        if (!inBlock) {\n          debug('Closing line: ', lineOffset + settings.lineOffset);\n          settings.warn(`warnClosingWithoutOpening`, `Attempt to close non-existant block at line ${lineOffset + settings.lineOffset}`);\n          return;\n        }\n\n        if (!block.route // No manual route definition (OAPI)\n        && !block.name // No manual function name either (JSDOC)\n        && !settings.context(block, lines.slice(lineOffset + 1, lineOffset + 1 + settings.contextLimit)) // Could not determine anything from context\n        && settings.warnNoAutoContext // And we should warn\n        ) settings.warn(`warnNoAutoContext`, `Cannot determine context of block at line ${lineOffset + settings.lineOffset} - define @name or @route tags`);\n        settings.postProcess(block);\n        out.push(block);\n        block = {};\n        inBlock = false;\n        inMultiline = false;\n      } else if (inBlock) {\n        //debug('Line: ' + line);\n        var lineParsed = /^\\s*\\*\\s*@(?<param>\\w+) (?<operand>.*)$/.exec(line)?.groups;\n\n        if (!lineParsed && inMultiline) {\n          // Invalid parse + is in multiline - append to multiline data\n          block[inMultiline] = (block[inMultiline] ? block[inMultiline] + '\\n' : '') + line.replace(/^\\s*\\*\\s*/, '');\n        } else if (!lineParsed) {// Non-parsable - ignore\n          // Pass - Nothing to extract, probably a blank line\n        } else {\n          // Single line JSDoc parameter - extract JSDoc line into block\n          // Decide what parameter block to handle\n          var paramSettings = this.params[lineParsed.param] || this.params.DEFAULT;\n          var paramId = paramSettings.as || lineParsed.param;\n          if (!(paramSettings.enabled ?? true)) return; // Don't handle this param\n\n          var value = paramSettings.handler // Has a handler - glue output to existing block\n          ? paramSettings.handler(lineParsed.operand) : lineParsed.operand;\n\n          if (paramSettings.isUnique && block[paramId]) {\n            // Check if its supposed to be unique and we already have one\n            throw new Error(`Block parameter already exists \"${lineParsed.param}\" at line ${lineOffset + settings.lineOffset} - it is supposed to be unique`);\n          } else if (paramSettings.isUnique) {\n            // Simple key=val\n            block[paramId] = value;\n          } else {\n            // Assume arrays for everything else\n            if (!block[paramId]) block[paramId] = [];\n            block[paramId].push(value);\n          }\n\n          if (paramSettings.endpoint && paramSettings.endpoint != 'jsdoc') {\n            if (block.endpoint) throw new Error(`Trying to overwrite existing JSDoc endpoint \"${block.endpoint}\" with \"${paramSettings.endpoint}\" on line ${lineOffset + settings.lineOffset} - can only use one eventual endpoint`);\n            block.endpoint = paramSettings.endpoint;\n          }\n        }\n      }\n    });\n    return out;\n  }\n\n}\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./lib/DocReader.js?");

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/debug/src/index.js":
/*!*****************************************!*\
  !*** ./node_modules/debug/src/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = __webpack_require__(/*! ./browser.js */ \"./node_modules/debug/src/browser.js\");\n} else {\n\tmodule.exports = __webpack_require__(/*! ./node.js */ \"./node_modules/debug/src/node.js\");\n}\n\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./node_modules/debug/src/index.js?");

/***/ }),

/***/ "./node_modules/debug/src/node.js":
/*!****************************************!*\
  !*** ./node_modules/debug/src/node.js ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nconst tty = __webpack_require__(/*! tty */ \"tty\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = __webpack_require__(/*! supports-color */ \"./node_modules/supports-color/index.js\");\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./node_modules/debug/src/node.js?");

/***/ }),

/***/ "./node_modules/has-flag/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-flag/index.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (flag, argv) => {\n\targv = argv || process.argv;\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst pos = argv.indexOf(prefix + flag);\n\tconst terminatorPos = argv.indexOf('--');\n\treturn pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n};\n\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./node_modules/has-flag/index.js?");

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/supports-color/index.js":
/*!**********************************************!*\
  !*** ./node_modules/supports-color/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst hasFlag = __webpack_require__(/*! has-flag */ \"./node_modules/has-flag/index.js\");\n\nconst env = process.env;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false')) {\n\tforceColor = false;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = true;\n}\nif ('FORCE_COLOR' in env) {\n\tforceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(stream) {\n\tif (forceColor === false) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (stream && !stream.isTTY && forceColor !== true) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor ? 1 : 0;\n\n\tif (process.platform === 'win32') {\n\t\t// Node.js 7.5.0 is the first version of Node.js to include a patch to\n\t\t// libuv that enables 256 color output on Windows. Anything earlier and it\n\t\t// won't work. However, here we target Node.js 8 at minimum as it is an LTS\n\t\t// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\n\t\t// release that supports 256 colors. Windows 10 build 14931 is the first release\n\t\t// that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(process.versions.node.split('.')[0]) >= 8 &&\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: getSupportLevel(process.stdout),\n\tstderr: getSupportLevel(process.stderr)\n};\n\n\n//# sourceURL=webpack://@momsfriendlydevco/docgen/./node_modules/supports-color/index.js?");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");;

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");;

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");;

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");;

/***/ }),

/***/ "lodash":
/*!*************************************************************************************!*\
  !*** external {"commonjs":"lodash","commonjs2":"lodash","amd":"lodash","root":"_"} ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./lib/DocReader.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});